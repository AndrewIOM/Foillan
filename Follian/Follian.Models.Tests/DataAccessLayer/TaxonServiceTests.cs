using System;
using System.Linq;
using Foillan.Models.Biodiversity;
using Foillan.Models.DataAccessLayer.Concrete;
using Foillan.Models.Tests.DummyClasses;
using Moq;
using NUnit.Framework;

namespace Foillan.Models.Tests.DataAccessLayer
{
    [TestFixture]
    public class TaxonServiceTests
    {
        DummyUnitOfWork _unitOfWork;
        Mock<InMemoryTaxonRepository> _repository;

        [SetUp]
        public void Setup()
        {
            _unitOfWork = new DummyUnitOfWork();
            _repository = new Mock<InMemoryTaxonRepository> {CallBase = true};
        }

        [Test]
        public void AddTaxon_TaxonNull_ThrowsArgumentExceptionAndNoAdditionsToRepository()
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.AddTaxon(null, null));
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Never);
        }

        [Test]
        public void AddTaxon_TaxonInvalid_ThrowsAgrumentExceptionAndNoAdditionsToRepository()
        {
            var taxon = new Taxon();
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.AddTaxon(taxon, null));
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Never);
        }

        [Test]
        public void AddTaxon_TaxonomyEmpty_ThrowsArgumentExceptionAndNoAdditionsToRepository()
        {
            var taxon = new Taxon
            {
                Rank = TaxonRank.Species,
                LatinName = "name"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.AddTaxon(taxon, new Taxonomy()));
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Never);
        }

        [Test]
        public void AddTaxon_EmptyTaxononmy_ThrowsArgumentException()
        {
            var taxon = new Taxon
            {
                Rank = TaxonRank.Species,
                LatinName = "name"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.AddTaxon(taxon, new Taxonomy()));
        }

        [Test]
        //TODO Expand to cover all ranks
        public void AddTaxon_TaxonomyDoesNotContainAllAncestors_ThrowsArgumentException()
        {
            var taxon = new Taxon {Rank = TaxonRank.Genus};
            var taxonomy = new Taxonomy
            {
                Kingdom = "TestKingdom",
                Phylum = "TestPhylum",
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.AddTaxon(taxon, taxonomy));
        }

        [Test]
        public void AddTaxon_ValidParametersOfKingdomRank_AddsKingdomToRepository()
        {
            var taxon = new Taxon { LatinName = "Animalia", Rank = TaxonRank.Kingdom };
            var taxonomy = new Taxonomy();
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfPhylumRank_AddsPhylumToRepository()
        {
            var taxon = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Phylum };
            var taxonomy = new Taxonomy { Kingdom = "Animalia" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfPhylumRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Phylum };
            var taxonomy = new Taxonomy { Kingdom = "Animalia" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfPhylumRank_AddedTaxonHaveCorrectParents()
        {
            var taxon = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Phylum };
            var taxonomy = new Taxonomy { Kingdom = "Animalia" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);

            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.ParentTaxon.Rank == TaxonRank.Kingdom 
                && t.ParentTaxon.LatinName == "Animalia")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfClassRank_AddsClassToRepository()
        {
            var taxon = new Taxon { LatinName = "Aves", Rank = TaxonRank.Class };
            var taxonomy = new Taxonomy { Kingdom = "Animalia", Phylum = "Chordata" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfClassRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Class };
            var taxonomy = new Taxonomy { Kingdom = "Animalia", Phylum = "Chordata" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfClassRank_ExactlyThreeAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Class };
            var taxonomy = new Taxonomy { Kingdom = "Animalia", Phylum = "Chordata" };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(3));
        }

        [Test]
        public void AddTaxon_ValidParametersOfOrderRank_AddsOrderToRepository()
        {
            var taxon = new Taxon { LatinName = "Charadriiformes", Rank = TaxonRank.Order };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Order && t.LatinName == "Charadriiformes")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfOrderRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "Charadriiformes", Rank = TaxonRank.Order };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfOrderRank_ExactlyFourAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "Charadriiformes", Rank = TaxonRank.Order };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(4));
        }

        [Test]
        public void AddTaxon_ValidParametersOfFamilyRank_AddsFamilyToRepository()
        {
            var taxon = new Taxon { LatinName = "Alcidae", Rank = TaxonRank.Family };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Family && t.LatinName == "Alcidae")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfFamilyRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "Alcidae", Rank = TaxonRank.Family };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Order && t.LatinName == "Charadriiformes"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfFamilyRank_ExactlyFiveAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "Alcidae", Rank = TaxonRank.Family };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(5));
        }

        [Test]
        public void AddTaxon_ValidParametersOfGenusRank_AddsGenusToRepository()
        {
            var taxon = new Taxon { LatinName = "Fratercula", Rank = TaxonRank.Genus };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Genus && t.LatinName == "Fratercula")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfGenusRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "Fratercula", Rank = TaxonRank.Genus };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Order && t.LatinName == "Charadriiformes"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Family && t.LatinName == "Alcidae"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfGenusRank_ExactlySixAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "Fratercula", Rank = TaxonRank.Genus };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(6));
        }

        [Test]
        public void AddTaxon_ValidParametersOfSpeciesRank_AddsSpeciesToRepository()
        {
            var taxon = new Taxon { LatinName = "arctica", Rank = TaxonRank.Species };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Species && t.LatinName == "arctica")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfSpeciesRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "arctica", Rank = TaxonRank.Species };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Order && t.LatinName == "Charadriiformes"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Family && t.LatinName == "Alcidae"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Genus && t.LatinName == "Fratercula"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfSpeciesRank_ExactlySevenAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "arctica", Rank = TaxonRank.Species };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(7));
        }

        [Test]
        public void AddTaxon_ValidParametersOfSubSpeciesRank_AddsSubSpeciesToRepository()
        {
            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Subspecies && t.LatinName == "testsubspecies")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfSubSpeciesRank_AddsStubTaxaToRepository()
        {
            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Kingdom && t.LatinName == "Animalia"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Phylum && t.LatinName == "Chordata"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Class && t.LatinName == "Aves"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Order && t.LatinName == "Charadriiformes"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Family && t.LatinName == "Alcidae"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Genus && t.LatinName == "Fratercula"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Species && t.LatinName == "test"
                && t.Description == "Autogenerated taxon stub.")), Times.Once);
        }

        [Test]
        public void AddTaxon_ValidParametersOfSubSpeciesRank_ExactlyEightAdditionsToRepository()
        {
            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.IsAny<Taxon>()), Times.Exactly(8));
        }


        [Test]
        public void AddTaxon_SomeAncestorsAlreadyExist_OnlyAddsNewTaxa()
        {
            //Setup existing taxa
            //TODO Clean up this setup into seperate builder
            var life = _repository.Object.GetById(1);
            var kingdom = new Taxon { LatinName = "Animalia", Rank = TaxonRank.Kingdom, ParentTaxon = life };
            var phylum = new Taxon { LatinName = "Chordata", Rank = TaxonRank.Phylum, ParentTaxon = kingdom };
            _repository.Object.Add(kingdom);
            _repository.Object.Add(phylum);

            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Subspecies)), Times.Once);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Description == "Autogenerated taxon stub.")), Times.Exactly(5));
        }

        [Test]
        public void AddTaxon_TaxonAlreadyExists_TaxonNotAdded()
        {
            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            _repository.Object.Add(taxon);
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.AddTaxon(taxon, taxonomy);
            _repository.Verify(m => m.Add(It.Is<Taxon>(t => t.Rank == TaxonRank.Subspecies)), Times.Once);
        }

        [Test]
        public void AddTaxon_TaxonAlreadyExists_ReturnsExistingTaxon()
        {
            var taxon = new Taxon { LatinName = "testsubspecies", Rank = TaxonRank.Subspecies };
            var taxonomy = new Taxonomy
            {
                Kingdom = "Animalia",
                Phylum = "Chordata",
                Class = "Aves",
                Order = "Charadriiformes",
                Family = "Alcidae",
                Genus = "Fratercula",
                Species = "test"
            };
            _repository.Object.Add(taxon);
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.AddTaxon(taxon, taxonomy);
            Assert.AreEqual(taxon, result);
        }

        [Test]
        [TestCase(TaxonRank.Species)]
        [TestCase(TaxonRank.Genus)]
        [TestCase(TaxonRank.Subspecies)]
        public void GetTaxonOfRank_OnlyReturnsTaxonOfRankFromRepository(TaxonRank rank)
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);

            var result = sut.GetTaxaByRank(rank).ToList();
            Assert.IsNotNull(result);
            var errors = (from taxon in result
                          where taxon.Rank != rank
                          select String.Format("Found error: {0} was of type {1}", taxon.LatinName, taxon.Rank)).ToList();

            Assert.IsEmpty(errors);
        }

        [Test]
        [TestCase(TaxonRank.Null)]
        [TestCase(89)]
        public void GetTaxaByRank_RankIsInvalid_ReturnsEmptyList(TaxonRank rank)
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.GetTaxaByRank(rank);
            Assert.IsEmpty(result);
        }

        [Test]
        public void GetTaxaByRank_ValidRankAndTaxaInDatabase_ListContainsTaxaInDatabase()
        {
            var expected = new Taxon
            {
                Id = 5,
                Rank = TaxonRank.Species,
                LatinName = "Test"
            };
            _repository.Object.Add(expected);
            var sut = new TaxonService(_unitOfWork, _repository.Object);

            var result = sut.GetTaxaByRank(TaxonRank.Species);

            Assert.IsTrue(result.Count() == 1);
            Assert.IsTrue(result.First() == expected);
        }

        [Test]
        public void GetTaxaByRank_ValidRankButEmptyDatabase_EmptyList()
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.GetTaxaByRank(TaxonRank.Species);
            Assert.IsEmpty(result);
        }

        [Test]
        public void GetTaxonById_CallsGetByIdOnRepository()
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.GetTaxonById(6);
            _repository.Verify(m => m.GetById(6), Times.Once);
        }

        [Test]
        public void GetTaxonById_TaxonWithIdNotInDatabase_ReturnsNull()
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.GetTaxonById(6);
            Assert.IsNull(result);
        }

        [Test]
        public void GetTaxonById_TaxonInDatabase_ReturnsTaxon()
        {
            _repository.Object.Add(new Taxon
            {
                Id = 6,
                LatinName = "test",
                Rank = TaxonRank.Order
            });
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.GetTaxonById(6);
            Assert.IsNotNull(result);
        }

        [Test]
        [TestCase(null, TaxonRank.Species)]
        [TestCase("", TaxonRank.Species)]
        [TestCase("test name", null)]
        [TestCase("test name", 64)]
        public void GetTaxonByNameAndRank_InvalidParameters_ThrowsArgumentException(string latinName, TaxonRank rank)
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<ArgumentException>(() => sut.GetTaxonByNameAndRank(latinName, rank));
        }

        [Test]
        public void GetTaxonByNameAndRank_ValidParameters_TaxonRepositoryQueriedOnce()
        {
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            sut.GetTaxonByNameAndRank("test", TaxonRank.Subspecies);
            _repository.Verify(m => m.GetAll(), Times.Once);
        }

        [Test]
        public void GetTaxonByNameAndRank_RepositoryContainsSingleMatch_ReturnsTaxon()
        {
            var expected = new Taxon
            {
                Id = 77,
                LatinName = "Test",
                Rank = TaxonRank.Genus
            };
            _repository.Object.Add(expected);
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            var result = sut.GetTaxonByNameAndRank("Test", TaxonRank.Genus);
            Assert.IsNotNull(result);
            Assert.AreEqual(expected, result);
        }

        [Test]
        //TODO This method should probably return an IEnumerable, or also take account of the parent node
        public void GetTaxonByNameAndRank_RepositoryContainsMultipleMatches_ThrowsNotImplementedException()
        {
            var first = new Taxon
            {
                Id = 77,
                LatinName = "Test",
                Rank = TaxonRank.Genus
            };
            var second = new Taxon
            {
                Id = 654,
                LatinName = "Test",
                Rank = TaxonRank.Genus
            };
            _repository.Object.Add(first);
            _repository.Object.Add(second);
            var sut = new TaxonService(_unitOfWork, _repository.Object);
            Assert.Throws<NotImplementedException>(() => sut.GetTaxonByNameAndRank("Test", TaxonRank.Genus));
        }

        [Test]
        public void SaveChanges_TriggersSaveInUnitOfWork()
        {
            var unitOfWork = new Mock<DummyUnitOfWork>();
            var repository = new InMemoryTaxonRepository();
            var sut = new TaxonService(unitOfWork.Object, repository);

            sut.SaveChanges();
            unitOfWork.Verify(u => u.Save(), Times.Once);
        }
    }
}
