using System.Collections.Generic;
using System.Linq;
using Foillan.Models.Biodiversity;
using Foillan.Models.DataAccessLayer.Abstract;

namespace Foillan.Models.DataAccessLayer.Concrete
{
    public class TaxonService : ITaxonService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IRepository<Taxon> _taxonRepository;

        public TaxonService(IUnitOfWork unitOfWork, IRepository<Taxon> taxonRepository)
        {
            _unitOfWork = unitOfWork;
            _taxonRepository = taxonRepository;
        }

        //TODO Handle case where newTaxon is not of rank Species
        public virtual Taxon AddTaxonWithTaxonomy(Taxon newTaxon, IDictionary<TaxonRank, string> taxonomy)
        {
            var life = _taxonRepository.GetById(1);
            Taxon kingdom;
            Taxon phylum;
            Taxon @class;
            Taxon order;
            Taxon family;
            Taxon genus;

            try
            {
                kingdom = GenerateStubTaxon(taxonomy[TaxonRank.Kingdom], TaxonRank.Kingdom);
                phylum = GenerateStubTaxon(taxonomy[TaxonRank.Phylum], TaxonRank.Phylum);
                @class = GenerateStubTaxon(taxonomy[TaxonRank.Class], TaxonRank.Class);
                order = GenerateStubTaxon(taxonomy[TaxonRank.Order], TaxonRank.Order);
                family = GenerateStubTaxon(taxonomy[TaxonRank.Family], TaxonRank.Family);
                genus = GenerateStubTaxon(taxonomy[TaxonRank.Genus], TaxonRank.Genus);
            }
            catch (KeyNotFoundException)
            {
                return null;
            }

            //TODO Tidy up this implementation
            kingdom.ParentTaxon = life;
            var returnedKingdom = AddNewOrReturnExistingTaxon(kingdom);

            phylum.ParentTaxon = returnedKingdom;
            var returnedPhylum = AddNewOrReturnExistingTaxon(phylum);

            @class.ParentTaxon = returnedPhylum;
            var returnedClass = AddNewOrReturnExistingTaxon(@class);

            order.ParentTaxon = returnedClass;
            var returnedOrder = AddNewOrReturnExistingTaxon(order);

            family.ParentTaxon = returnedOrder;
            var returnedFamily = AddNewOrReturnExistingTaxon(family);

            genus.ParentTaxon = returnedFamily;
            var returnedGenus = AddNewOrReturnExistingTaxon(genus);

            newTaxon.ParentTaxon = returnedGenus;
            var returnedSpecies = AddNewOrReturnExistingTaxon(newTaxon);

            return returnedSpecies;
        }

        public virtual IEnumerable<Taxon> GetTaxaByRank(TaxonRank rank)
        {
            var taxaOfRank = _taxonRepository.GetAll().Where(t => t.Rank.Equals(rank));
            return taxaOfRank;
        }

        public virtual Taxon GetTaxonById(int id)
        {
            return _taxonRepository.GetById(id);
        }

        public Taxon GetTaxonByNameAndRank(string taxonLatinName, TaxonRank rank)
        {
            var taxon = _taxonRepository.GetAll()
                .FirstOrDefault(t => t.LatinName.Equals(taxonLatinName) && t.Rank.Equals(rank));
            return taxon;
        }

        public virtual void SaveChanges()
        {
            _unitOfWork.Save();
        }

        private Taxon AddNewOrReturnExistingTaxon(Taxon taxon)
        {
            var existingTaxon = _taxonRepository.GetAll().FirstOrDefault(
                t => t.LatinName == taxon.LatinName
                && t.Rank == taxon.Rank
                && t.ParentTaxon == taxon.ParentTaxon);

            if (existingTaxon == null)
            {
                var result = _taxonRepository.Add(taxon);
                return result;
            }

            return existingTaxon;
        }

        private static Taxon GenerateStubTaxon(string latinName, TaxonRank rank)
        {
            return new Taxon
            {
                LatinName = latinName,
                Rank = rank,
                Description = "Autogenerated taxon stub."
            };
        }
    }
}